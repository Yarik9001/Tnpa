/*
  Пример работает в паре с SerialIntArrayTx

  Программа получает по софт-сериалу данные в формате
  <data:xy>zzzzzzzzzzzzzzzzzCRC16</data>
  где xy - байт в передаче, а zzz... собственно сами двубайтные целые числа подряд в формате "первый байт младший"

  Считаем ЦРЦ библиотечной функцикй от 0

*/
=========================================================================================================
Для работы библиотеки джойстика начальные значения следующие:

/*
  #define PS_CLK_PIN 13
  #define PS_D0_PIN 11
  #define PS_D1_PIN 12
  #define PS_CS_PIN 10
*/

// error = ps2x.config_gamepad(PS_CLK_PIN, PS_D0_PIN, PS_CS_PIN, PS_D1_PIN, pressures, rumble);
//setup pins and settings:  GamePad(clock, command, attention, data, Pressures?, Rumble?) check for error
// ps2x.config_gamepad(4,6,5,7, true, true);
===========================================================================================================
/*
  ArrMotor[0]  1 ходовой мотор (вид сверху левый передний)     // <0>   <1> //
  ArrMotor[1]  2 ходовой мотор (вид сверху правый передний)    //    <4>    //
  ArrMotor[2]  3 ходовой мотор (вид сверху левый задний)       //    <5>    //
  ArrMotor[3]  4 ходовой мотор (вид сверзу правый задний)      // <2>   <3> //
  ArrMotor[4]  передний дифферентный мотор
  ArrMotor[5]  задний дифферентный мотор
  ArrMotor[6]  серводвигатель камеры

  ArrMotor[7]  серводвигатель манипулятора
  ArrMotor[8]  включение выключение лампы
  ArrMotor[9]  контрольная сумма
*/
==============================================================================================================
/*
  Алгоритм работы будет такой:
  1) Через определенный момент времени (гораздо меньший чем через который будем опрашивать есть ли показания датчиков)
    опрашиваем значения на джостике ps2x:
    Analog(PSS_LY) это будет движение вперед (0-255)
    Analog(PSS_LX) - поворот влево или враво.(0-255)
    Analog(PSS_RY) - управление дифферентом.(0-255)
    Analog(PSS_RX) - движение в бок?(0-255)

    Button(PSB_L1) - Сжать манипулятор
    Button(PSB_L2) - Разжать манипулятор

    Button(PSB_R1) - движение камерой в одну сторону
    Button(PSB_R2) - движение камерой в другую сторону

    Потом на основании этих данных вычислим значения оборотов для двигателей (ходовых и дифферентных) и перешлем их СуперНаутилусу :)
  2) будем через определенный момент времени смотреть есть ли данные программного com порта и распечатывать эти данные на дисплее.
*/
=================================================================================================================
  /* You must Read Gamepad to get new values
    Read GamePad and set vibration values
    ps2x.read_gamepad(small motor on/off, larger motor strenght from 0-255)
    if you don't enable the rumble, use ps2x.read_gamepad(); with no values

    you should call this at least once a second
  */
  
  // millis() - текущее время, будет сброс после 50 дней. Но конструкци "беззнакового вычитания" (millis() - LastTimeControl) это не мешает
=================================================================================================================
